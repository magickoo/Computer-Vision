import cv2

# Enable camera
cap = cv2.VideoCapture(0)
cap.set(3, 640)  # Set width
cap.set(4, 420)  # Set height

# Import cascade files for object detection
faceCascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
eyeCascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_eye_tree_eyeglasses.xml")
smileCascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_smile.xml")
bodyCascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_fullbody.xml")

while True:
    # Read a frame from the webcam
    success, img = cap.read()
    if not success:
        print('Image not captured')
        break

    imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Getting corners around the face
    faces = faceCascade.detectMultiScale(imgGray, 1.3, 5)  # 1.3 = scale factor, 5 = minimum neighbor

    # Drawing bounding box around face
    for (x, y, w, h) in faces:
        img = cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 3)

        # Detecting eyes within the face region
        roi_gray = imgGray[y:y + h, x:x + w]
        roi_color = img[y:y + h, x:x + w]
        eyes = eyeCascade.detectMultiScale(roi_gray)
        for (ex, ey, ew, eh) in eyes:
            cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (255, 0, 0), 2)

        # Detecting smile within the face region
        smiles = smileCascade.detectMultiScale(roi_gray, 1.8, 20)
        for (sx, sy, sw, sh) in smiles:
            cv2.rectangle(roi_color, (sx, sy), (sx + sw, sy + sh), (0, 255, 255), 2)

    # Detecting full body in the frame
    bodies = bodyCascade.detectMultiScale(imgGray, 1.1, 3)
    for (bx, by, bw, bh) in bodies:
        cv2.rectangle(img, (bx, by), (bx + bw, by + bh), (255, 0, 255), 3)

    cv2.imshow('face_detect', img)
    if cv2.waitKey(10) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
